name: Deploy to Firebase Hosting and APK/AAB/IPA on merge

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: macos-latest  # Change to macOS for iOS builds
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Ruby for Fastlane
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0
          bundler-cache: true

      # Set up Java (Required for Android)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2

      # Decode Google Service Account Key for Firebase
      - name: Decode Service Account Key JSON File
        uses: timheuer/base64-to-file@v1
        id: service_account_json_file
        with:
          fileName: "serviceAccount.json"
          encodedString: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Version Increment
        run: bundle exec fastlane increment_build_num
        env:
          ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}

      # ---- ANDROID BUILD ---- #

      # Decode Keystore
      - name: Decode Keystore
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
        run: |
          echo "$ANDROID_KEYSTORE" | base64 --decode > android/app/college-finder.jks

      # Create key.properties file
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=college-finder.jks" >> android/key.properties

      # Build Flutter Web
      - name: Build Flutter Web
        run: flutter build web

      # Build Flutter APK
      - name: Build Flutter APK
        run: flutter build apk --release

      # Build Flutter AAB
      - name: Build Flutter AAB
        run: flutter build appbundle --release

      # Deploy Web to Firebase Hosting
      - name: Deploy Web to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_COLLEGE_FINDER_54F2C }}
          channelId: live
          projectId: college-finder-54f2c

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      # Deploy APK to Firebase App Distribution
      - name: Deploy APK to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
          --app "1:36597009887:android:0fec54d9bc8e280453486a" \
          --token ${{ secrets.FIREBASE_TOKEN }}

      # Deploy AAB to Firebase App Distribution
      - name: Deploy AAB to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/bundle/release/app-release.aab \
          --app "1:36597009887:android:0fec54d9bc8e280453486a" \
          --token ${{ secrets.FIREBASE_TOKEN }}

      # ---- iOS BUILD & SIGNING ---- #

      # Decode and Install Apple Certificate (.p12)
      - name: Decode and Install Apple Certificate
        env:
          IOS_DISTRIBUTION_CERT: ${{ secrets.IOS_DISTRIBUTION_CERT }}
          IOS_DISTRIBUTION_CERT_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERT_PASSWORD }}
        run: |
          echo "$IOS_DISTRIBUTION_CERT" | base64 --decode > ios_certificate.p12
          security create-keychain -p "temp" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp" build.keychain
          security import ios_certificate.p12 -k build.keychain -P "$IOS_DISTRIBUTION_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "temp" build.keychain

      # Decode and Install Provisioning Profile
      - name: Decode and Install Provisioning Profile
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > ios_profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Decode App Store Connect API Key
      - name: Decode App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          mkdir -p fastlane
          echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > fastlane/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8

      # Build and Sign Flutter IPA
      - name: Build and Sign Flutter IPA
        run: flutter build ipa

      # Deploy IPA to Firebase App Distribution
      - name: Deploy IPA to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/ios/ipa/*.ipa \
          --app "1:36597009887:ios:1f2605c8364b9e9153486a" \
          --token ${{ secrets.FIREBASE_TOKEN }}
